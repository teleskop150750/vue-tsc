{
  "compilerOptions": {
    /* Посетите https://aka.ms/tsconfig, чтобы узнать больше о данном файле */

    /* Проекты */
    // "incremental": true,                              /* Сохранять файлы .tsbuildinfo для инкрементальной компиляции проектов. */
    // "composite": true,                                /* Включить ограничения, позволяющие использовать проект TypeScript с ссылками на проекты. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Указать путь к файлу .tsbuildinfo для инкрементальной компиляции. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Отключить предпочтение исходных файлов вместо файлов объявлений при ссылке на составные проекты. */
    // "disableSolutionSearching": true,                 /* Отключить проверку множественных проектов при редактировании. */
    // "disableReferencedProjectLoad": true,             /* Сократить количество автоматически загружаемых проектов TypeScript. */

    /* Язык и окружение */
    "target": "ESNext",                                  /* Установить версию языка JavaScript для создаваемого JavaScript и включить совместимые объявления библиотек. */
    "lib": [],                                           /* Указать набор объединенных файлов объявлений библиотек, описывающих целевую среду выполнения. */
    "jsx": "preserve",                                   /* Указать, какой код JSX будет сгенерирован. */
    // "experimentalDecorators": true,                   /* Включить экспериментальную поддержку устаревших экспериментальных декораторов. */
    // "emitDecoratorMetadata": true,                    /* Генерировать метаданные дизайна-типа для декорированных объявлений в исходных файлах. */
    // "jsxFactory": "",                                 /* Указать функцию фабрики JSX, используемую при генерации JSX для React, например 'React.createElement' или 'h'. */
    // "jsxFragmentFactory": "",                         /* Указать ссылку на JSX Fragment, используемую для фрагментов при генерации JSX для React, например 'React.Fragment' или 'Fragment'. */
    "jsxImportSource": "vue",                            /* Указать спецификатор модуля, используемый для импорта функций фабрики JSX при использовании 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Указать объект, вызываемый для 'createElement'. Это применяется только при нацеливании на 'react' JSX. */
    // "noLib": true,                                    /* Отключить включение любых файлов библиотек, включая файл lib.d.ts по умолчанию. */
    "useDefineForClassFields": true,                     /* Генерировать поля класса в соответствии со стандартом ECMAScript. */
    // "moduleDetection": "auto",                        /* Управление методом обнаружения файлов JS в формате модуля. */

    /* Модули */
    "module": "ESNext",                                  /* Указать, какой код модуля будет сгенерирован. */
    // "rootDir": "./",                                  /* Указать корневую папку в ваших исходных файлах. */
    "moduleResolution": "Node",                          /* Указать, как TypeScript ищет файл по заданному спецификатору модуля. */
    // "baseUrl": "./",                                  /* Указать базовый каталог для разрешения имен модулей, не относящихся к относительным. */
    // "paths": {},                                      /* Указать набор записей, переопределяющих импорты в дополнительных местах поиска. */
    // "rootDirs": [],                                   /* Разрешить обрабатывать несколько папок как одну при разрешении модулей. */
    // "typeRoots": [],                                  /* Указать несколько папок, действующих как './node_modules/@types'. */
    // "types": [],                                      /* Указать имена пакетов типов, которые должны быть включены, но не должны быть указаны в исходном файле. */
    // "allowUmdGlobalAccess": true,                     /* Разрешить доступ к глобальным объектам UMD из модулей. */
    // "moduleSuffixes": [],                             /* Список суффиксов имен файлов для поиска при разрешении модуля. */
    // "allowImportingTsExtensions": true,               /* Разрешить импорт файлов с расширениями TypeScript. Требуется установка параметров '--moduleResolution bundler' и '--noEmit' или '--emitDeclarationOnly'. */
    // "resolvePackageJsonExports": true,                /* Использовать поле 'exports' в package.json при разрешении импортов пакетов. */
    // "resolvePackageJsonImports": true,                /* Использовать поле 'imports' в package.json при разрешении импортов. */
    // "customConditions": [],                           /* Условия, устанавливаемые в дополнение к специфичным для разрешателя значениям по умолчанию при разрешении импортов. */
    "resolveJsonModule": true                            /* Включить импорт файлов .json. */,
    // "allowArbitraryExtensions": true,                 /* Разрешить импорт файлов с любым расширением при наличии файла объявлений. */
    // "noResolve": true,                                /* Запретить расширение числа файлов, которое TypeScript должно добавить в проект, с помощью 'import', 'require' или '<reference>'. */

    /* Поддержка JavaScript */
    // "allowJs": true,                                  /* Разрешить использование JavaScript-файлов в вашей программе. Используйте параметр 'checkJS', чтобы получать ошибки из этих файлов. */
    // "checkJs": true,                                  /* Включить отчет об ошибках в проверенных типах JavaScript-файлов. */
    // "maxNodeModuleJsDepth": 1,                        /* Указать максимальную глубину папки, используемую для проверки JavaScript-файлов из 'node_modules'. Применимо только с 'allowJs'. */

    /* Генерация */
    // "declaration": true,                              /* Создавать файлы .d.ts из TypeScript и JavaScript-файлов в вашем проекте. */
    // "declarationMap": true,                           /* Создавать карты исходных кодов для файлов .d.ts. */
    // "emitDeclarationOnly": true,                      /* Выводить только файлы .d.ts, а не JavaScript-файлы. */
    // "sourceMap": true,                                /* Создавать карты исходных кодов для созданных JavaScript-файлов. */
    // "inlineSourceMap": true,                          /* Включить файлы карты исходных кодов внутри созданного JavaScript. */
    // "outFile": "./",                                  /* Указать файл, в который будут собраны все выходные данные в один файл JavaScript. Если 'declaration' установлен в true, также указывает файл, в который будут собраны все выходные данные .d.ts. */
    // "outDir": "./",                                   /* Указать папку для всех созданных файлов. */
    // "removeComments": true,                           /* Отключить вывод комментариев. */
    // "noEmit": true,                                   /* Отключить создание файлов во время компиляции. */
    // "importHelpers": true,                            /* Разрешить импорт вспомогательных функций из tslib один раз для всего проекта, а не включать их в каждый файл. */
    // "importsNotUsedAsValues": "remove",               /* Указать поведение при генерации/проверке импортов, используемых только для типов. */
    // "downlevelIteration": true,                       /* Генерировать более совместимый, но более многословный и менее производительный JavaScript для итерации. */
    // "sourceRoot": "",                                 /* Указать корневой путь для поиска исходного кода при отладке. */
    // "mapRoot": "",                                    /* Указать местоположение, где отладчик должен искать файлы карты вместо сгенерированных местоположений. */
    // "inlineSources": true,                            /* Включить исходный код в карты исходных кодов внутри созданного JavaScript. */
    // "emitBOM": true,                                  /* Выводить в начале выходных файлов метку порядка байтов UTF-8 (BOM). */
    "newLine": "lf",                                     /* Установить символ новой строки для создания файлов. */
    // "stripInternal": true,                            /* Отключить генерацию объявлений, содержащих '@internal' в их комментариях JSDoc. */
    // "noEmitHelpers": true,                            /* Отключить создание специальных пользовательских функций-помощников, таких как '__extends', в скомпилированном коде. */
    // "noEmitOnError": true,                            /* Отключить создание файлов, если обнаружены ошибки проверки типов. */
    // "preserveConstEnums": true,                       /* Отключить стирание объявлений 'const enum' в сгенерированном коде. */
    // "declarationDir": "./",                           /* Указать папку для созданных файлов объявлений. */
    // "preserveValueImports": true,                     /* Сохранять неиспользуемые импортированные значения в выходном JavaScript, которые в противном случае будут удалены. */

    /* Ограничения интероперабельности */
    // "isolatedModules": true,                          /* Убедиться, что каждый файл может быть безопасно транспилирован без зависимости от других импортов. */
    "verbatimModuleSyntax": true,                        /* Не преобразовывать или удалять импорты и экспорты, не отмеченные только типами, обеспечивая их запись в формате выходного файла на основе настройки 'module'. */
    // "allowSyntheticDefaultImports": true,             /* Разрешить 'import x from y', когда модуль не имеет экспорта по умолчанию. */
    "esModuleInterop": true,                             /* Генерировать дополнительный JavaScript для облегчения поддержки импорта модулей CommonJS. Это позволяет использовать 'allowSyntheticDefaultImports' для совместимости типов. */
    // "preserveSymlinks": true,                         /* Отключить разрешение символических ссылок на их реальные пути. Это соответствует тому же флагу в node. */
    "forceConsistentCasingInFileNames": true,            /* Убедиться, что регистр букв указан правильно в импортах. */

    /* Проверка типов */
    "strict": true,                                      /* Включить все строгие параметры проверки типов. */
    "noImplicitAny": true,                               /* Включить отчет об ошибках для выражений и объявлений с предполагаемым типом 'any'. */
    "strictNullChecks": true,                            /* При проверке типов учитывать значения 'null' и 'undefined'. */
    "strictFunctionTypes": true,                         /* При присваивании функций проверять, чтобы параметры и возвращаемые значения были совместимыми по подтипу. */
    "strictBindCallApply": true,                         /* Проверять, чтобы аргументы для методов 'bind', 'call' и 'apply' соответствовали исходной функции. */
    "strictPropertyInitialization": true,                /* Проверять наличие свойств класса, которые объявлены, но не установлены в конструкторе. */
    "noImplicitThis": true,                              /* Включить отчет об ошибках, когда 'this' имеет тип 'any'. */
    "useUnknownInCatchVariables": true,                  /* Определять переменные в блоке catch по умолчанию как 'unknown', а не 'any'. */
    "alwaysStrict": true,                                /* Гарантировать, что будет всегда генерироваться директива 'use strict'. */
    "noUnusedLocals": true,                              /* Включить отчет об ошибках, когда локальные переменные не используются. */
    "noUnusedParameters": true,                          /* Выводить ошибку, когда параметр функции не используется. */
    "exactOptionalPropertyTypes": false,                 /* Интерпретировать необязательные типы свойств так, как они записаны, а не добавлять 'undefined'. */
    "noImplicitReturns": true,                           /* Включить отчет об ошибках для кодовых путей, которые не возвращают явно в функции. */
    "noFallthroughCasesInSwitch": true,                  /* Включить отчет об ошибках для случаев падения в операторах switch. */
    "noUncheckedIndexedAccess": true,                    /* Добавлять 'undefined' к типу при доступе с помощью индекса. */
    "noImplicitOverride": true,                          /* Убедиться, что переопределяющие члены в производных классах помечены модификатором override. */
    "noPropertyAccessFromIndexSignature": true,          /* Обязательно использовать индексные аксессоры для ключей, объявленных с использованием индексного типа. */
    "allowUnusedLabels": false,                          /* Отключить отчет об ошибках для неиспользуемых меток. */
    "allowUnreachableCode": false,                       /* Отключить отчет об ошибках для недостижимого кода. */

    /* Завершенность */
    // "skipDefaultLibCheck": true,                      /* Пропустить проверку типов файлов .d.ts, включенных в TypeScript. */
    "skipLibCheck": true                                 /* Пропустить проверку типов всех файлов .d.ts. */
  }
}
